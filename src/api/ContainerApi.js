/**
 * Modoki API Documentation
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * OpenAPI Generator version: 3.1.1-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/ContainerConfig', 'model/Error', 'model/GoaContainerConfig', 'model/GoaContainerCreateResults', 'model/GoaContainerInspect', 'model/GoaContainerListEachCollection'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/ContainerConfig'), require('../model/Error'), require('../model/GoaContainerConfig'), require('../model/GoaContainerCreateResults'), require('../model/GoaContainerInspect'), require('../model/GoaContainerListEachCollection'));
  } else {
    // Browser globals (root is window)
    if (!root.ModokiApiDocumentation) {
      root.ModokiApiDocumentation = {};
    }
    root.ModokiApiDocumentation.ContainerApi = factory(root.ModokiApiDocumentation.ApiClient, root.ModokiApiDocumentation.ContainerConfig, root.ModokiApiDocumentation.Error, root.ModokiApiDocumentation.GoaContainerConfig, root.ModokiApiDocumentation.GoaContainerCreateResults, root.ModokiApiDocumentation.GoaContainerInspect, root.ModokiApiDocumentation.GoaContainerListEachCollection);
  }
}(this, function(ApiClient, ContainerConfig, Error, GoaContainerConfig, GoaContainerCreateResults, GoaContainerInspect, GoaContainerListEachCollection) {
  'use strict';

  /**
   * Container service.
   * @module api/ContainerApi
   * @version 1.0.0
   */

  /**
   * Constructs a new ContainerApi. 
   * @alias module:api/ContainerApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the containerCreate operation.
     * @callback module:api/ContainerApi~containerCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GoaContainerCreateResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * create container
     * create a new container
     * @param {String} image Name of image
     * @param {String} name Name of container and subdomain
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.command Command to run specified as a string or an array of strings.
     * @param {Array.<String>} opts.entrypoint The entry point for the container as a string or an array of strings
     * @param {Array.<String>} opts.env Environment variables
     * @param {Boolean} opts.sslRedirect Whether HTTP is redirected to HTTPS (default to true)
     * @param {Array.<String>} opts.volumes Path to volumes in a container
     * @param {String} opts.workingDir Current directory (PWD) in the command will be launched
     * @param {module:api/ContainerApi~containerCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GoaContainerCreateResults}
     */
    this.containerCreate = function(image, name, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'image' is set
      if (image === undefined || image === null) {
        throw new Error("Missing the required parameter 'image' when calling containerCreate");
      }

      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling containerCreate");
      }


      var pathParams = {
      };
      var queryParams = {
        'image': image,
        'name': name,
        'sslRedirect': opts['sslRedirect'],
        'workingDir': opts['workingDir'],
      };
      var collectionQueryParams = {
        'command': {
          value: opts['command'],
          collectionFormat: 'multi'
        },
        'entrypoint': {
          value: opts['entrypoint'],
          collectionFormat: 'multi'
        },
        'env': {
          value: opts['env'],
          collectionFormat: 'multi'
        },
        'volumes': {
          value: opts['volumes'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['jwt'];
      var contentTypes = [];
      var accepts = ['application/vnd.goa.error', 'vnd.application/goa.container.create.results+json'];
      var returnType = GoaContainerCreateResults;

      return this.apiClient.callApi(
        '/container/create', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the containerDownload operation.
     * @callback module:api/ContainerApi~containerDownloadCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * download container
     * Copy files from the container
     * @param {String} id ID or name
     * @param {String} internalPath Path in the container to save files
     * @param {module:api/ContainerApi~containerDownloadCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.containerDownload = function(id, internalPath, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling containerDownload");
      }

      // verify the required parameter 'internalPath' is set
      if (internalPath === undefined || internalPath === null) {
        throw new Error("Missing the required parameter 'internalPath' when calling containerDownload");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
        'internalPath': internalPath,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['jwt'];
      var contentTypes = [];
      var accepts = ['application/octet-stream', 'application/vnd.goa.error'];
      var returnType = null;

      return this.apiClient.callApi(
        '/container/{id}/download', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the containerDownload1 operation.
     * @callback module:api/ContainerApi~containerDownload1Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * download container
     * Copy files from the container
     * @param {String} internalPath Path in the container to save files
     * @param {Object} opts Optional parameters
     * @param {String} opts.id ID or name
     * @param {module:api/ContainerApi~containerDownload1Callback} callback The callback function, accepting three arguments: error, data, response
     */
    this.containerDownload1 = function(internalPath, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'internalPath' is set
      if (internalPath === undefined || internalPath === null) {
        throw new Error("Missing the required parameter 'internalPath' when calling containerDownload1");
      }


      var pathParams = {
      };
      var queryParams = {
        'id': opts['id'],
        'internalPath': internalPath,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['jwt'];
      var contentTypes = [];
      var accepts = ['application/octet-stream', 'application/vnd.goa.error'];
      var returnType = null;

      return this.apiClient.callApi(
        '/container/download', 'HEAD',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the containerExec operation.
     * @callback module:api/ContainerApi~containerExecCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * exec container
     * Exec a command with attaching to a container using WebSocket(Mainly for xterm.js, using a protocol for terminado)
     * @param {String} id id or name
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.command The path to the executable file
     * @param {Boolean} opts.tty Tty
     * @param {module:api/ContainerApi~containerExecCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.containerExec = function(id, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling containerExec");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
        'tty': opts['tty'],
      };
      var collectionQueryParams = {
        'command': {
          value: opts['command'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['jwt'];
      var contentTypes = [];
      var accepts = ['application/vnd.goa.error'];
      var returnType = null;

      return this.apiClient.callApi(
        '/container/{id}/exec', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the containerGetConfig operation.
     * @callback module:api/ContainerApi~containerGetConfigCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GoaContainerConfig} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getConfig container
     * Get the config of a container
     * @param {String} id id or name
     * @param {module:api/ContainerApi~containerGetConfigCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GoaContainerConfig}
     */
    this.containerGetConfig = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling containerGetConfig");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['jwt'];
      var contentTypes = [];
      var accepts = ['application/vnd.goa.error', 'vpn.application/goa.container.config'];
      var returnType = GoaContainerConfig;

      return this.apiClient.callApi(
        '/container/{id}/config', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the containerInspect operation.
     * @callback module:api/ContainerApi~containerInspectCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GoaContainerInspect} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * inspect container
     * Return details of a container
     * @param {String} id ID or name
     * @param {module:api/ContainerApi~containerInspectCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GoaContainerInspect}
     */
    this.containerInspect = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling containerInspect");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['jwt'];
      var contentTypes = [];
      var accepts = ['application/vnd.goa.error', 'vpn.application/goa.container.inspect'];
      var returnType = GoaContainerInspect;

      return this.apiClient.callApi(
        '/container/{id}/inspect', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the containerList operation.
     * @callback module:api/ContainerApi~containerListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GoaContainerListEachCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * list container
     * Return a list of containers
     * @param {module:api/ContainerApi~containerListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GoaContainerListEachCollection}
     */
    this.containerList = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['jwt'];
      var contentTypes = [];
      var accepts = ['application/vnd.goa.error', 'vpn.application/goa.container.list.each; type=collection'];
      var returnType = GoaContainerListEachCollection;

      return this.apiClient.callApi(
        '/container/list', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the containerLogs operation.
     * @callback module:api/ContainerApi~containerLogsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * logs container
     * Get stdout and stderr logs from a container.
     * @param {String} id id or name
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.follow  (default to false)
     * @param {String} opts.since 
     * @param {Boolean} opts.stderr  (default to false)
     * @param {Boolean} opts.stdout  (default to false)
     * @param {String} opts.tail  (default to &#39;all&#39;)
     * @param {Boolean} opts.timestamps  (default to false)
     * @param {String} opts.until 
     * @param {module:api/ContainerApi~containerLogsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.containerLogs = function(id, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling containerLogs");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
        'follow': opts['follow'],
        'since': opts['since'],
        'stderr': opts['stderr'],
        'stdout': opts['stdout'],
        'tail': opts['tail'],
        'timestamps': opts['timestamps'],
        'until': opts['until'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['jwt'];
      var contentTypes = [];
      var accepts = ['application/vnd.goa.error'];
      var returnType = null;

      return this.apiClient.callApi(
        '/container/{id}/logs', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the containerRemove operation.
     * @callback module:api/ContainerApi~containerRemoveCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * remove container
     * remove a container
     * @param {Boolean} force If the container is running, kill it before removing it.
     * @param {String} id id or name
     * @param {module:api/ContainerApi~containerRemoveCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.containerRemove = function(force, id, callback) {
      var postBody = null;

      // verify the required parameter 'force' is set
      if (force === undefined || force === null) {
        throw new Error("Missing the required parameter 'force' when calling containerRemove");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling containerRemove");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
        'force': force,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['jwt'];
      var contentTypes = [];
      var accepts = ['application/vnd.goa.error'];
      var returnType = null;

      return this.apiClient.callApi(
        '/container/{id}/remove', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the containerSetConfig operation.
     * @callback module:api/ContainerApi~containerSetConfigCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * setConfig container
     * Change the config of a container
     * @param {String} id id or name
     * @param {module:model/ContainerConfig} containerConfig 
     * @param {module:api/ContainerApi~containerSetConfigCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.containerSetConfig = function(id, containerConfig, callback) {
      var postBody = containerConfig;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling containerSetConfig");
      }

      // verify the required parameter 'containerConfig' is set
      if (containerConfig === undefined || containerConfig === null) {
        throw new Error("Missing the required parameter 'containerConfig' when calling containerSetConfig");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['jwt'];
      var contentTypes = ['application/json', 'application/xml', 'application/gob', 'application/x-gob'];
      var accepts = ['application/vnd.goa.error'];
      var returnType = null;

      return this.apiClient.callApi(
        '/container/{id}/config', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the containerStart operation.
     * @callback module:api/ContainerApi~containerStartCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * start container
     * start a container
     * @param {String} id id or name
     * @param {module:api/ContainerApi~containerStartCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.containerStart = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling containerStart");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['jwt'];
      var contentTypes = [];
      var accepts = ['application/vnd.goa.error'];
      var returnType = null;

      return this.apiClient.callApi(
        '/container/{id}/start', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the containerStop operation.
     * @callback module:api/ContainerApi~containerStopCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * stop container
     * stop a container
     * @param {String} id id or name
     * @param {module:api/ContainerApi~containerStopCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.containerStop = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling containerStop");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['jwt'];
      var contentTypes = [];
      var accepts = ['application/vnd.goa.error'];
      var returnType = null;

      return this.apiClient.callApi(
        '/container/{id}/stop', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the containerUpload operation.
     * @callback module:api/ContainerApi~containerUploadCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * upload container
     * Copy files to the container
     * @param {String} id ID or name
     * @param {Boolean} copyUIDGID Copy all uid/gid information
     * @param {File} data File tar archive
     * @param {String} path Path in the container to save files
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.allowOverwrite Allow for a existing directory to be replaced by a file (default to false)
     * @param {module:api/ContainerApi~containerUploadCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.containerUpload = function(id, copyUIDGID, data, path, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling containerUpload");
      }

      // verify the required parameter 'copyUIDGID' is set
      if (copyUIDGID === undefined || copyUIDGID === null) {
        throw new Error("Missing the required parameter 'copyUIDGID' when calling containerUpload");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling containerUpload");
      }

      // verify the required parameter 'path' is set
      if (path === undefined || path === null) {
        throw new Error("Missing the required parameter 'path' when calling containerUpload");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'allowOverwrite': opts['allowOverwrite'],
        'copyUIDGID': copyUIDGID,
        'data': data,
        'path': path
      };

      var authNames = ['jwt'];
      var contentTypes = ['multipart/form-data'];
      var accepts = ['application/vnd.goa.error'];
      var returnType = null;

      return this.apiClient.callApi(
        '/container/{id}/upload', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
