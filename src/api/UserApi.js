/**
 * Modoki API Documentation
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * OpenAPI Generator version: 3.1.1-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Error', 'model/GoaUserAuthorizedkeyCollection', 'model/GoaUserConfig', 'model/GoaUserDefaultshell', 'model/UserAuthorizedKey'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Error'), require('../model/GoaUserAuthorizedkeyCollection'), require('../model/GoaUserConfig'), require('../model/GoaUserDefaultshell'), require('../model/UserAuthorizedKey'));
  } else {
    // Browser globals (root is window)
    if (!root.ModokiApiDocumentation) {
      root.ModokiApiDocumentation = {};
    }
    root.ModokiApiDocumentation.UserApi = factory(root.ModokiApiDocumentation.ApiClient, root.ModokiApiDocumentation.Error, root.ModokiApiDocumentation.GoaUserAuthorizedkeyCollection, root.ModokiApiDocumentation.GoaUserConfig, root.ModokiApiDocumentation.GoaUserDefaultshell, root.ModokiApiDocumentation.UserAuthorizedKey);
  }
}(this, function(ApiClient, Error, GoaUserAuthorizedkeyCollection, GoaUserConfig, GoaUserDefaultshell, UserAuthorizedKey) {
  'use strict';

  /**
   * User service.
   * @module api/UserApi
   * @version 1.0.0
   */

  /**
   * Constructs a new UserApi. 
   * @alias module:api/UserApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the userAddAuthorizedKeys operation.
     * @callback module:api/UserApi~userAddAuthorizedKeysCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * addAuthorizedKeys user
     * @param {module:model/UserAuthorizedKey} userAuthorizedKey 
     * @param {module:api/UserApi~userAddAuthorizedKeysCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.userAddAuthorizedKeys = function(userAuthorizedKey, callback) {
      var postBody = userAuthorizedKey;

      // verify the required parameter 'userAuthorizedKey' is set
      if (userAuthorizedKey === undefined || userAuthorizedKey === null) {
        throw new Error("Missing the required parameter 'userAuthorizedKey' when calling userAddAuthorizedKeys");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['jwt'];
      var contentTypes = ['application/json', 'application/xml', 'application/gob', 'application/x-gob'];
      var accepts = ['application/vnd.goa.error'];
      var returnType = null;

      return this.apiClient.callApi(
        '/user/config/authorizedKeys', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the userGetConfig operation.
     * @callback module:api/UserApi~userGetConfigCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GoaUserConfig} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getConfig user
     * @param {module:api/UserApi~userGetConfigCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GoaUserConfig}
     */
    this.userGetConfig = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['jwt'];
      var contentTypes = [];
      var accepts = ['application/vnd.goa.error', 'vpn.application/goa.user.config'];
      var returnType = GoaUserConfig;

      return this.apiClient.callApi(
        '/user/config', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the userGetDefaultShell operation.
     * @callback module:api/UserApi~userGetDefaultShellCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GoaUserDefaultshell} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getDefaultShell user
     * @param {module:api/UserApi~userGetDefaultShellCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GoaUserDefaultshell}
     */
    this.userGetDefaultShell = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['jwt'];
      var contentTypes = [];
      var accepts = ['application/vnd.goa.error', 'vpn.application/goa.user.defaultshell'];
      var returnType = GoaUserDefaultshell;

      return this.apiClient.callApi(
        '/user/config/defaultShell', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the userListAuthorizedKeys operation.
     * @callback module:api/UserApi~userListAuthorizedKeysCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GoaUserAuthorizedkeyCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * listAuthorizedKeys user
     * @param {module:api/UserApi~userListAuthorizedKeysCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GoaUserAuthorizedkeyCollection}
     */
    this.userListAuthorizedKeys = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['jwt'];
      var contentTypes = [];
      var accepts = ['application/vnd.goa.error', 'vpn.application/goa.user.authorizedkey; type=collection'];
      var returnType = GoaUserAuthorizedkeyCollection;

      return this.apiClient.callApi(
        '/user/config/authorizedKeys', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the userRemoveAuthorizedKeys operation.
     * @callback module:api/UserApi~userRemoveAuthorizedKeysCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * removeAuthorizedKeys user
     * @param {String} label 
     * @param {module:api/UserApi~userRemoveAuthorizedKeysCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.userRemoveAuthorizedKeys = function(label, callback) {
      var postBody = null;

      // verify the required parameter 'label' is set
      if (label === undefined || label === null) {
        throw new Error("Missing the required parameter 'label' when calling userRemoveAuthorizedKeys");
      }


      var pathParams = {
      };
      var queryParams = {
        'label': label,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['jwt'];
      var contentTypes = [];
      var accepts = ['application/vnd.goa.error'];
      var returnType = null;

      return this.apiClient.callApi(
        '/user/config/authorizedKeys', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the userSetAuthorizedKeys operation.
     * @callback module:api/UserApi~userSetAuthorizedKeysCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * setAuthorizedKeys user
     * @param {Array.<UserAuthorizedKey>} userAuthorizedKey 
     * @param {module:api/UserApi~userSetAuthorizedKeysCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.userSetAuthorizedKeys = function(userAuthorizedKey, callback) {
      var postBody = userAuthorizedKey;

      // verify the required parameter 'userAuthorizedKey' is set
      if (userAuthorizedKey === undefined || userAuthorizedKey === null) {
        throw new Error("Missing the required parameter 'userAuthorizedKey' when calling userSetAuthorizedKeys");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['jwt'];
      var contentTypes = ['application/json', 'application/xml', 'application/gob', 'application/x-gob'];
      var accepts = ['application/vnd.goa.error'];
      var returnType = null;

      return this.apiClient.callApi(
        '/user/config/authorizedKeys', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the userSetDefaultShell operation.
     * @callback module:api/UserApi~userSetDefaultShellCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * setDefaultShell user
     * @param {String} defaultShell 
     * @param {module:api/UserApi~userSetDefaultShellCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.userSetDefaultShell = function(defaultShell, callback) {
      var postBody = null;

      // verify the required parameter 'defaultShell' is set
      if (defaultShell === undefined || defaultShell === null) {
        throw new Error("Missing the required parameter 'defaultShell' when calling userSetDefaultShell");
      }


      var pathParams = {
      };
      var queryParams = {
        'defaultShell': defaultShell,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['jwt'];
      var contentTypes = [];
      var accepts = ['application/vnd.goa.error'];
      var returnType = null;

      return this.apiClient.callApi(
        '/user/config/defaultShell', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
